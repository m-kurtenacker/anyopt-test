/* all sorts of stuff copied over from runtime */

#[import(cc="C", name="printf")] fn print(_: &[u8], i32) -> ();

#[import(cc = "builtin")] fn sizeof[_]() -> i64;
#[import(cc = "builtin")] fn select[T, U](_cond: T, _true: U, _false: U) -> U;

#[import(cc = "thorin")] fn vectorize(_vector_length: i32, _body: fn(i32) -> ()) -> ();

mod math_builtins {

#[import(cc = "builtin")] fn fabs[T](T) -> T;
#[import(cc = "builtin")] fn copysign[T](T, T) -> T;
#[import(cc = "builtin")] fn signbit[T](T) -> bool;
#[import(cc = "builtin")] fn round[T](T) -> T;
#[import(cc = "builtin")] fn ceil[T](T) -> T;
#[import(cc = "builtin")] fn floor[T](T) -> T;
#[import(cc = "builtin")] fn fmin[T](T, T) -> T;
#[import(cc = "builtin")] fn fmax[T](T, T) -> T;
#[import(cc = "builtin")] fn cos[T](T) -> T;
#[import(cc = "builtin")] fn sin[T](T) -> T;
#[import(cc = "builtin")] fn tan[T](T) -> T;
#[import(cc = "builtin")] fn acos[T](T) -> T;
#[import(cc = "builtin")] fn asin[T](T) -> T;
#[import(cc = "builtin")] fn atan[T](T) -> T;
#[import(cc = "builtin")] fn atan2[T](T, T) -> T;
#[import(cc = "builtin")] fn sqrt[T](T) -> T;
#[import(cc = "builtin")] fn cbrt[T](T) -> T;
#[import(cc = "builtin")] fn pow[T](T, T) -> T;
#[import(cc = "builtin")] fn exp[T](T) -> T;
#[import(cc = "builtin")] fn exp2[T](T) -> T;
#[import(cc = "builtin")] fn log[T](T) -> T;
#[import(cc = "builtin")] fn log2[T](T) -> T;
#[import(cc = "builtin")] fn log10[T](T) -> T;
#[import(cc = "builtin")] fn isnan[T](T) -> bool;
#[import(cc = "builtin")] fn isfinite[T](T) -> bool;

}

// range, range_step, unroll, unroll_step, etc.
fn @unroll_step(body: fn(i32) -> ()) {
    fn @(?beg & ?end & ?step) loop(beg: i32, end: i32, step: i32) -> () {
        if beg < end {
            @body(beg);
            loop(beg + step, end, step)
        }
    }
    loop
}

fn @unroll_step_rev(body: fn(i32) -> ()) {
    fn @(?beg & ?end & ?step) loop(end: i32, beg: i32, step: i32) -> () {
        if end > beg {
            @body(end);
            loop(end - step, beg, step)
        }
    }
    loop
}

fn @range(body: fn(i32) -> ()) = @|lower: i32, upper: i32| unroll_step(body)($lower, $upper, 1);
fn @range_step(body: fn(i32) -> ()) = @|lower: i32, upper: i32, step: i32| unroll_step(body)($lower, $upper, step);
fn @range_rev(body: fn(i32) -> ()) = @|upper: i32, lower: i32| unroll_step_rev(body)(upper, lower, 1);

fn @unroll(body: fn(i32) -> ()) = @|lower: i32, upper: i32| unroll_step(body)(lower, upper, 1);
fn @unroll_rev(body: fn(i32) -> ()) = @|upper: i32, lower: i32| unroll_step_rev(body)(upper, lower, 1);


/* The actual test */

#[import(cc="C", name="testimport")] fn testimport1(_: i32) -> i32;
#[import(cc="C", name="testimport")] fn testimport2(_: f32) -> f32;

enum Test {
  a(i64),
  b(i32, i32)
}

fn test (a : i32) -> i32 {
    if a < 3 { a + 30 } else { a + 40 }
}

fn test_2 (a : i32) -> i32 {
    a * (sizeof[i16]() as i32)
}

fn test_tuple (a : (i32, i64)) -> i32 {
    a.0 * (a.1 as i32)
}

fn test_option (t : Test) -> i32 {
    match t {
        Test::a(i) => {
            let x = (i >> 32) as i32;
            let y = (i & (((-1 as u32) as u64) as i64)) as i32;
            x * y
        },
        Test::b(x, y) => x * y
    }
}

fn test_mathop (a : f32) -> i32 {
    math_builtins::ceil(math_builtins::fabs(a)) as i32
}

/*fn test_nvvm(r : i32) -> i32 {
    let grid = (1, 1, 1);
    let block = (1, 1, 1);

    let acc = cuda_accelerator(0);

    let local_buffer = alloc_cpu(sizeof[i32]());
    *(local_buffer.data as &mut i32) = r;

    let in_mem = acc.alloc(sizeof[i32]());
    let out_mem = acc.alloc(sizeof[i32]());

    copy(local_buffer, in_mem);

    for work_item in acc.exec(grid, block) {
        *(out_mem.data as &mut i32) = *(in_mem.data as &i32) * 2;
    }

    copy(out_mem, local_buffer);

    *(local_buffer.data as &i32)
}*/

fn test_vectorize(r : i32) -> i32 {
    let mut A : [i32 * 4];
    vectorize(4, |i| {
            A(i) = r * i;
    });

    let mut k = 0;
    for r in unroll(0, 4) {
        k += A(r);
    }
    k
}

#[export]
static global_x : i32;

#[export]
fn main(_argc : i32, argv : &[&[u8]]) -> i32 {
    let s = (argv(1)(0) as i32) - 48;
    let t = (argv(1)(1) as i32) - 48;
    let x = select(argv(1)(1) != 0, s * 10 + t, s);

    let mut A : [i32 * 4];
    for i in range(0, 4) {
        A(i) = x;
    };

    let a = test(A(0) + A(1));
    print("%d\n", a);

    let b = test_2(A(0) + A(1));
    print("%d\n", b);

    let mut tuple = (A(0) + A(1), sizeof[i32]());
    tuple.1 = sizeof[i16]();
    let c = test_tuple(tuple);
    print("%d\n", c);

    let d = test_option(Test::b(A(0) + A(1), sizeof[i16]() as i32));
    print("%d\n", d);

    let e = test_mathop(x as f32 * -1.25);
    print("%d\n", e);

    //let f = test_nvvm(x);
    //print("%d\n", f);

    let g = test_vectorize(A(0) + A(1));
    print("%d\n", g);

    print("%d\n", global_x);

    0
}
